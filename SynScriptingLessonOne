Hello Syn! Thanks for accepting the challenge.

You know about terminal and console commands. You have begun to practice using them independently. You've been introduced to BASH. And you have already practiced using BASH syntax and tricks like tab complete, pipes '|' and redirects '>' And finally, you know how to invoke a program by package name and provide initialization values for runtime to it through console.

That's awesome. You're doing great. But I want you to do even greater. I think you can do it, and I'll help if you can't.

Step 1. Open terminal. Type 'cd ~/Documents/'
'~' is a path shortcut to user home directory. In this case, '/home/!username/'
'cd' is 'change directory' and lets you move your working path.

[Remember, the account you are interacting through needs read permissions to a directory to navigate into or see its contents. Since your account owns your users directory, you can both read and write to the contents with no problem.

1a. Go back up one directory level using 'cd ..' (change directory to the directory above the current directory) and run 'ls -l' (list current directory contents, long list mode.) This is, among other things, what a permissions string looks like. Sometimes the account you're "borrowing" doesn't have proper permissions to do what you want to do.

In that case, sometimes, the output of the commands 'group !username' or 'id !username' (list group/id memberships of a user account,) combined with 'ls -l' (list contents in current directory, use long list output) will give you enough knowledge, and if you have the power, you can just add the account you're using to a valid group or vice versa. Other times, you will need to "borrow" a second, more privileged account to make that change. Don't forget to put things you "borrow" back how you found them once you're done :)

1b. For now, just run 'id !username' to see your membership. Then 'cd Documents' to go back to where you came from.

A fun thing about permissions - even if you don't have read to a directory, you can still view permissions for a folder you can see but can't access. After all, how else would your account be able to know that it's been told it can't go in? ;) 'chmod' (change mode) command will let you edit permissions.

1c. For extra credit, 'man chmod' to open the change mode command manual page, and tell me why 'chmod 777' is easy but sloppy.]

Step 2. From this location, the path of which can be printed using 'pwd' (present working directory,) use the command string 'mkdir scripts && cd scripts' (make directory named scripts - and right away, change to the scripts directory.)

It's a good idea to double check where you think you are against where you actually are using 'pwd' (present working directory) before beginning some data operation.

Step 3. Did you 'pwd' to double check you were in /home/!username/Documents/scripts/ ? Good. Is that where you are? Even better. So now, 'touch autoNmap.sh' (create a file header in the file system called autoNmap.sh, and leave the content of the file blank.) 'touch' can also be useful to update the "last modified" timestamp without opening the file.

The file extension .sh is indicative of a shell script. We are going to create a shell script to ask the user a few questions, autorun nmap based on the answers, automatically document the resulting output into a folder with the run date name and a file with the run time name, then display a little happy face to the user before ending.

In the future, I can just tell you to run 
'cd ~/Documents && mkdir scripts && cd scripts && touch autoNmap.sh'

Let me know when you are ready.

Good luck, happy hunting!


